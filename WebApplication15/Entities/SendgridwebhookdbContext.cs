// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WebApplication15.Entities
{
    public partial class SendgridwebhookdbContext : DbContext
    {
        public SendgridwebhookdbContext()
        {
        }

        public SendgridwebhookdbContext(DbContextOptions<SendgridwebhookdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<TestDatas> TestDatas { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customers>(entity =>
            {
                entity.HasKey(e => e.CustomerId);

                entity.Property(e => e.CustomerId).ValueGeneratedNever();

                entity.Property(e => e.CustomerName).IsRequired();

                entity.Property(e => e.CustomerUsername).IsRequired();

                entity.Property(e => e.Password).IsRequired();
            });

            modelBuilder.Entity<TestDatas>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Email).HasColumnName("email");

                entity.Property(e => e.Ip).HasColumnName("ip");

                entity.Property(e => e.MarketingCampaignId).HasColumnName("marketing_campaign_id");

                entity.Property(e => e.MarketingCampaignName).HasColumnName("marketing_campaign_name");

                entity.Property(e => e.Reason).HasColumnName("reason");

                entity.Property(e => e.Response).HasColumnName("response");

                entity.Property(e => e.SendgridEvent).HasColumnName("sendgrid_event");

                entity.Property(e => e.SendgridEventId).HasColumnName("sendgrid_event_id");

                entity.Property(e => e.SgMessageId).HasColumnName("sg_message_id");

                entity.Property(e => e.SmtpId).HasColumnName("smtp_id");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Timestamp).HasColumnName("timestamp");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.Uid).HasColumnName("uid");

                entity.Property(e => e.Url).HasColumnName("url");

                entity.Property(e => e.Useragent).HasColumnName("useragent");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}